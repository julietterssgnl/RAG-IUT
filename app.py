# Importation des biblioth√®ques n√©cessaires
import streamlit as st  # Import de Streamlit pour cr√©er l'interface utilisateur
from rag.indexing.document_loader import DocumentLoader  # Chargement des documents depuis le disque
from rag.indexing.text_splitter import TextSplitter  # D√©coupage des documents en morceaux
from rag.indexing.vectorstore import VectorStore  # Gestion de la base de donn√©es vectorielle
from rag.chat.chatbot import Chatbot  # Gestion du chatbot
from rag.feedback.feedback_manager import FeedbackManager  # Gestion des retours d'utilisateur

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Accueil - Assistant Assurance",  # Titre de la page
    page_icon="üè†",  # Ic√¥ne de la page
    layout="wide"  # Disposition de la page (largeur √©tendue)
)

# Ajout de CSS personnalis√© pour modifier le style des boutons de feedback
st.markdown("""
<style>
    /* Style pour le bouton positif (utile) */
    [data-testid="column"]:has(button:contains("üëç")) button:hover {
        background-color: #4CAF50 !important;  /* Couleur verte */
        border-color: #4CAF50 !important;      /* Bordure verte */
        color: white !important;               /* Texte blanc */
    }
    
    /* Style pour le bouton n√©gatif (pas utile) */
    [data-testid="column"]:has(button:contains("üëé")) button:hover {
        background-color: #f44336 !important;  /* Couleur rouge */
        border-color: #f44336 !important;      /* Bordure rouge */
        color: white !important;               /* Texte blanc */
    }
</style>
""", unsafe_allow_html=True)  # Applique le CSS au rendu HTML de Streamlit

def init_components(api_key: str):
    """
    Initialise tous les composants n√©cessaires au chatbot.
    Args:
        api_key (str): Cl√© API Google AI
    Returns:
        tuple: (vector_store, chatbot, feedback_manager)
    """
    st.session_state.api_key = api_key  # Sauvegarde de la cl√© API dans l'√©tat de la session
    
    # Chargement et traitement des documents dans un bloc d'attente
    with st.spinner("Initialisation en cours..."):  # Affiche un message de chargement
        try:
            # Chargement des documents depuis le r√©pertoire "documents"
            st.info("Chargement des documents...")  # Affiche une information √† l'utilisateur
            loader = DocumentLoader("documents")  # Instance de DocumentLoader pour charger les fichiers
            documents = loader.load_documents()  # Chargement des documents
            
            # D√©coupage des documents en morceaux plus petits
            st.info("D√©coupage des documents...")  # Affiche une info pendant le d√©coupage
            splitter = TextSplitter()  # Instance de TextSplitter pour d√©couper les documents
            chunks = splitter.split_documents(documents)  # D√©coupe les documents en morceaux
            
            # Cr√©ation de la base vectorielle pour stocker les documents d√©coup√©s
            st.info("Cr√©ation de la base vectorielle...")  # Affiche une info pendant la cr√©ation de la base
            vector_store = VectorStore()  # Instance de VectorStore pour g√©rer les embeddings des documents
            vector_store.add_documents(chunks)  # Ajoute les documents d√©coup√©s √† la base vectorielle
            
            # Initialisation du chatbot et du gestionnaire de feedback
            st.info("Initialisation du chatbot...")  # Affiche une info pendant l'initialisation du chatbot
            chatbot = Chatbot(api_key)  # Instance du chatbot avec la cl√© API fournie
            feedback_manager = FeedbackManager()  # Instance pour g√©rer les retours utilisateurs
            
            st.success("Initialisation termin√©e avec succ√®s!")  # Affiche un message de succ√®s
            return vector_store, chatbot, feedback_manager  # Retourne les objets cr√©√©s
            
        except Exception as e:
            st.error(f"Erreur lors de l'initialisation: {str(e)}")  # Affiche un message d'erreur si quelque chose ne va pas
            return None, None, None  # Retourne None en cas d'erreur

def handle_logout():
    """G√®re la d√©connexion de l'utilisateur."""
    for key in list(st.session_state.keys()):  # Parcours toutes les cl√©s dans la session
        del st.session_state[key]  # Supprime chaque cl√© pour r√©initialiser la session

def main():
    st.title("Assistant Assurance OptiSecure")  # Titre de la page principale
    
    # Inclure le CDN Font Awesome dans la page
    st.markdown(""" <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet"> """, unsafe_allow_html=True)

    # Gestion de la connexion dans la barre lat√©rale
    with st.sidebar:
        st.header("Configuration")  # Affiche un en-t√™te dans la barre lat√©rale
        
        # Affichage du statut de connexion
        if 'api_key' in st.session_state:  # V√©rifie si la cl√© API est enregistr√©e dans la session
            st.success("üü¢ Connect√©")  # Affiche un message de succ√®s si la connexion est √©tablie
            if st.button("D√©connexion"):  # Si le bouton de d√©connexion est cliqu√©
                handle_logout()  # D√©connexion de l'utilisateur
                st.rerun()  # Recharge la page
        else:
            # Affiche des instructions pour obtenir une cl√© API si l'utilisateur n'est pas connect√©
            st.markdown("""
            ### Obtenir une cl√© API
            1. Rendez-vous sur [Google AI Studio](https://aistudio.google.com/prompts/new_chat?pli=1)
            2. Connectez-vous avec votre compte Google
            3. Dans les param√®tres (‚öôÔ∏è), trouvez votre cl√© API
            """)
            
            st.markdown("---")
            
            api_key = st.text_input("Entrez votre cl√© API Google AI", type="password")  # Saisie de la cl√© API
            if api_key:  # Si une cl√© est saisie
                st.session_state.api_key = api_key  # Enregistre la cl√© API dans l'√©tat de la session
                st.rerun()  # Recharge la page
            else:
                st.warning("Veuillez entrer votre cl√© API pour continuer")  # Alerte si aucune cl√© n'est saisie
                return  # Quitte la fonction si aucune cl√© n'est fournie
    
    # Initialisation des composants si n√©cessaire
    if 'api_key' in st.session_state and 'initialized' not in st.session_state:  # Si la cl√© API est pr√©sente et l'initialisation n'a pas encore √©t√© faite
        vector_store, chatbot, feedback_manager = init_components(st.session_state.api_key)  # Initialise les composants
        if vector_store and chatbot and feedback_manager:  # Si l'initialisation a r√©ussi
            # Enregistre les objets dans l'√©tat de la session pour les r√©utiliser plus tard
            st.session_state.vector_store = vector_store
            st.session_state.chatbot = chatbot
            st.session_state.feedback_manager = feedback_manager
            st.session_state.initialized = True  # Marque que l'initialisation est termin√©e
    

    # Interface utilisateur principale si le syst√®me est initialis√©
    if st.session_state.get('initialized'): # Si le syst√®me a √©t√© initialis√©
        st.markdown("<i class='fa fa-user'></i><strong>Posez votre question</strong>", unsafe_allow_html=True) # Sous-titre pour la section de la question
        query = st.text_input("Votre question sur les contrats d'assurance:") # Champ de saisie de la question

        
        if query:  # Si une question est saisie
            with st.spinner("Recherche en cours..."):  # Affiche un message de chargement pendant la recherche
                try:
                    # Recherche des documents pertinents pour la question pos√©e
                    context = st.session_state.vector_store.search(query)  
                    # G√©n√©ration de la r√©ponse par le chatbot
                    response = st.session_state.chatbot.generate_response(query, context)
                    
                    # Affichage de la r√©ponse et des boutons de feedback
                    with st.container():  # Cr√©e un conteneur pour afficher la r√©ponse
                        st.markdown("---")

                        st.markdown("<i class='fa fa-robot'></i><strong>R√©ponse</strong>", unsafe_allow_html=True) # Affiche la r√©ponse g√©n√©r√©e par le chatbot
                        st.write(response)

                        
                        # Boutons de feedback avec styles personnalis√©s
                        col1, col2 = st.columns(2)  # Cr√©e deux colonnes pour les boutons
                        with col1:  # Colonne pour le bouton "Utile"
                            if st.button("üëç Utile", key="useful"):
                                st.session_state.feedback_manager.add_feedback(  # Enregistre le feedback
                                    query, response, True
                                )
                                st.success("Merci pour votre retour !")  # Affiche un message de remerciement
                        
                        with col2:  # Colonne pour le bouton "Pas utile"
                            neg_button = st.button("üëé Pas utile", key="not_useful")
                            if neg_button:
                                st.session_state.feedback_manager.add_feedback(  # Enregistre le feedback n√©gatif
                                    query, response, False
                                )
                                st.success("Merci pour votre retour !")
                        
                        st.markdown("---")
                except Exception as e:
                    st.error(f"Une erreur est survenue : {str(e)}")  # Affiche un message d'erreur en cas de probl√®me
                    # R√©initialisation en cas d'erreur de ChromaDB
                    if "no such table: collections" in str(e):  
                        st.warning("R√©initialisation du syst√®me...")
                        st.session_state.clear()  # Efface l'√©tat de la session
                        st.rerun()  # Recharge la page pour r√©initialiser l'application

# Fonction principale appel√©e si le script est ex√©cut√©
if __name__ == "__main__":
    main()
